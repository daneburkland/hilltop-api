service: hilltop-recording-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  recordingTableName: ${self:custom.stage}-recordings
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  screenshotsBucketArn:
    "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucketArn
  screenshotsBucket:
    "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucket
  tracingBucketArn:
    "Fn::ImportValue": ${self:custom.stage}-TracingBucketArn
  tracingBucket:
    "Fn::ImportValue": ${self:custom.stage}-TracingBucket
  userPoolArn:
    "Fn::ImportValue": ${self:custom.stage}-UserPoolArn
  userPoolId:
    "Fn::ImportValue": ${self:custom.stage}-UserPoolId

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  timeout: 30

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    recordingTableName: ${self:custom.recordingTableName}
    recordingTestTableName: ${file(../recordingTests/serverless.yml):custom.recordingTestTableName}
    authFlowTableName: ${file(../recordingTests/serverless.yml):custom.authFlowTableName}
    screenshotsBucketArn: ${self:custom.screenshotsBucketArn}
    screenshotsBucket: ${self:custom.screenshotsBucket}
    tracingBucketArn: ${self:custom.tracingBucketArn}
    tracingBucket: ${self:custom.tracingBucket}
    hilltopChromeUrl: ${self:custom.environment.hilltopChromeUrl}
    userPoolId: ${self:custom.userPoolId}

  iamRoleStatements:
    - Action:
        - cognito-idp:AdminGetUser
      Resource:
        - "Fn::GetAtt": [CognitoUserPool, Arn]
      Effect: Allow
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [RecordingTable, Arn]
        - "Fn::ImportValue": ${self:custom.stage}-RecordingTestTableArn
        - "Fn::ImportValue": ${self:custom.stage}-AuthFlowTableArn
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucket
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Fn::ImportValue": ${self:custom.stage}-TracingBucket
            - "/*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: recordings
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: recordings/{id}
          method: get
          cors: true
          authorizer: aws_iam

  execute:
    handler: execute.main
    events:
      - http:
          path: execute/{id}
          method: put
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: recordings
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: recordings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: recordings/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(../../resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(../../resources/recording-table.yml)}
  # S3
  - ${file(../../resources/screenshots-bucket.yml)}
  - ${file(../../resources/tracing-bucket.yml)}
  # Cognito
  - ${file(../../resources/cognito-user-pool.yml)}
  - ${file(../../resources/cognito-identity-pool.yml)}
